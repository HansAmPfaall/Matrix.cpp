{
    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "for": {
        "prefix": "for",
        "body": [
            "for (${size_t} ${2:i} = ${4:0}; ${i} < ${1:length}; ${2:i}++) {",
            "\t$0",
            "}"
        ],
        "description": "Code snippet for 'for' loop"
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--) {",
            "\t$3",
            "}"
        ],
        "description": "Code snippet for reverse 'for' loop"
    },
    "do": {
        "prefix": "do",
        "body": [
            "do {",
            "\t$1",
            "} while($2);"
        ],
        "description": "Code snippet for do...while loop"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ($1) {",
            "\t$2",
            "}"
        ],
        "description": ""
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "for(auto ${var} : ${collection_to_loop}) {",
            "\t$1",
            "}"
        ],
        "description": "Code snippet for range-based for loop (c++11) statement"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ($1) {",
            "\t$2",
            "}"
        ],
        "description": "Code snippet for if statement"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$1",
            "}"
        ],
        "description": "Code snippet for else statement"
    },
    "else if": {
        "prefix": "else if",
        "body": [
            "else if ($1) {",
            "\t$2",
            "}"
        ],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "enum ${MyEnum} {",
            "\t$1",
            "};"
        ],
        "description": "Code snippet for enum"
    },
    "enum class": {
        "prefix": "enum class",
        "body": [
            "enum class ${MyClass} { };"
        ],
        "description": "Code snippet for enum class (c++11)"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${MyClass} {",
            "public:",
            "\t${MyClass}();",
            "\t${MyClass}(${MyClass} &&) = default;",
            "\t${MyClass}(const ${MyClass} &) = default;",
            "\t${MyClass} &operator=(${MyClass} &&) = default;",
            "\t${MyClass} &operator=(const ${MyClass} &) = default;",
            "\t~${MyClass}();",
            "",
            "private:",
            "\t$1",
            "};",
            "",
            "${MyClass}::${MyClass}() {",
            "}",
            "",
            "${MyClass}::~${MyClass}() {",
            "}"
        ],
        "description": "Code snippet for class"
    },
    "classi": {
        "prefix": "classi",
        "body": [
            "class ${MyClass} {",
            "public:",
            "\t${MyClass}() = default;",
            "\t${MyClass}(${MyClass} &&) = default;",
            "\t${MyClass}(const ${MyClass} &) = default;",
            "\t${MyClass} &operator=(${MyClass} &&) = default;",
            "\t${MyClass} &operator=(const ${MyClass} &) = default;",
            "\t~${MyClass}() = default;",
            "",
            "private:",
            "\t$1",
            "};"
        ],
        "description": "Code snippet for class with inline constructor/destructor"
    },
    "interface": {
        "prefix": "interface",
        "body": [
            "__interface I${Interface} {",
            "\t$1",
            "};"
        ],
        "description": "Code snippet for interface (Visual C++)"
    },
    "namespace": {
        "prefix": "namespace",
        "body": [
            "namespace ${MyNamespace} {",
            "\t$1",
            "}"
        ]
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": [
            "#ifdef ${DEBUG}",
            "$1",
            "#endif // ${DEBUG}"
        ],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": [
            "#ifndef ${1:1}",
            "$2",
            "#endif // !$1"
        ],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": [
            "#ifdef ${1:0}",
            "$2",
            "#endif // $1"
        ],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "struct ${MyStruct} {",
            "\t$1",
            "};"
        ],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${switch_on}) {",
            "default:",
            "\tbreak;$1",
            "}"
        ],
        "description": "Code snippet for switch statement"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t",
            "}",
            "catch (const std::exception&) {",
            "\t$1",
            "}"
        ],
        "description": "Code snippet for try catch"
    },
    "union": {
        "prefix": "union",
        "body": [
            "union ${MyUnion} {",
            "\t$1",
            "};"
        ],
        "description": "Code snippet for union"
    },
    "cout": {
        "prefix": "cout",
        "body": [
            "std::cout << \"${1:/* message */}\" << std::endl;"
        ],
        "description": "Code snippet for printing to std::cout, provided the header is set"
    },
    "vector": {
        "prefix": "vector",
        "body": [
            "std::vector<${int}> v;"
        ],
        "description": "Code snippet for printing to std::vector, provided the header is set"
    },
    "string": {
        "prefix": "string",
        "body": [
            "std::string ${str};"
        ],
        "description": "Code snippet for printing to std::vector, provided the header is set"
    },
    "#inc": {
        "prefix": "#inc",
        "body": [
            "#include \"$1\""
        ],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": [
            "#include <$1>"
        ],
        "description": "Code snippet for #include \" \""
    },
    "#def": {
        "prefix": "#def",
        "body": [
            "#define \"$1\" \"$2\" "
        ],
        "description": "Code snippet for #define \" \""
    },
    "main": {
        "prefix": "main",
        "body": [
            "int main(int argc, char const *argv[]) {",
            "\t${0:/* code */}",
            "\treturn 0;",
            "}"
        ]
    }


}